// src/audio/core/MicrophoneManager.js // ‚úÖ Version unifi√©e : utilise TOUJOURS le m√™me AudioContext que l‚Äôapp (AudioEngine). import { Logger } from '../../logging/Logger.js'; import { audioEngine } from './AudioEngine.js'; export class MicrophoneManager { constructor(options = {}) { this.constraints = options.constraints || { audio: { channelCount: 1, echoCancellation: false, noiseSuppression: false, autoGainControl: false, // sampleRate: 48000, // Optionnel: d√©commente si tu veux forcer 48 kHz } }; this.stream = null; this.source = null; } async start() { try { Logger.info('[MicrophoneManager] Demande acc√®s microphone...', this.constraints); const ctx = audioEngine.context; // üîí Un seul contexte pour toute l‚Äôapp const stream = await navigator.mediaDevices.getUserMedia(this.constraints); Logger.info('[MicrophoneManager] Acc√®s microphone accord√© (contraintes compl√®tes)'); this.stream = stream; // ‚ö†Ô∏è IMPORTANT : cr√©er la source DANS LE M√äME CONTEXTE que tout le reste this.source = new MediaStreamAudioSourceNode(ctx, { mediaStream: stream }); Logger.info('[MicrophoneManager] Source cr√©√©e', { contextSampleRate: ctx.sampleRate, trackSampleRateHint: stream.getAudioTracks()?.[0]?.getSettings?.()?.sampleRate || 'n/a' }); return { stream: this.stream, source: this.source }; } catch (err) { // Message clair si c‚Äôest un mismatch de sample-rate / double contexte if (String(err?.message || err).includes('different sample-rate')) { Logger.error('[MicrophoneManager] Erreur: incompatibilit√© de fr√©quence entre AudioContexts. ' + 'Assure-toi qu‚ÄôUN SEUL AudioContext est utilis√© et √©vite de connecter des n≈ìuds de contextes diff√©rents.'); } else { Logger.error('[MicrophoneManager] Erreur start', err); } throw err; } } connect(node) { if (this.source && node) { this.source.connect(node); Logger.info('[MicrophoneManager] Source connect√©e au graphe audio'); } } disconnect() { try { if (this.source) this.source.disconnect(); } catch (_) { /* noop */ } } stop() { this.disconnect(); if (this.stream) { for (const track of this.stream.getTracks()) track.stop(); } this.stream = null; this.source = null; Logger.info('[MicrophoneManager] Micro arr√™t√© et flux lib√©r√©'); } }